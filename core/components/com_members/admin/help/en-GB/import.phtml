<?php
/**
 * @package    hubzero-cms
 * @copyright  Copyright 2005-2019 HUBzero Foundation, LLC.
 * @license    http://opensource.org/licenses/MIT MIT
 */
?>
<article>
	<h1><span>Members: Import</span></h1>

	<ul class="nav">
		<li><a href="#overview">Overview</a></li>
		<li><a href="#using">Using the Importer</a></li>
		<li><a href="#required">Required Fields</a></li>
		<li><a href="#running">Running an Import</a></li>
	</ul>

	<section id="overview">
		<h2><span>Overview</span></h2>

		<p>The members bulk importer/updater is designed to allow a site administrator to bulk import or update member data. Because of its ability to mass upload/modify accounts, it is an administrator only feature.</p>

		<p class="warning"><strong>Warning!</strong> Use of this feature can have potentially far-reaching and damaging consequences. Use with caution.</p>
	</section>
	<section id="using">
		<h2><span>Using the Importer</span></h2>

		<p>To create an import you need to navigate to the administrator panel. Then go to Users > Members > Import.</p>

		<p>Click on the New (plus icon) button in toolbar in the top right of the page. Enter the name of the import and any notes you might want to associate with that specific import. These are mostly for internal use.</p>

		<p>On the right is a file uploader that will allow you to select a data file, with all your raw resource data in it. If you have a very large data file or simply want to upload through SFTP then dont select any file and click save &amp; close in the upper right. When each import is created a file space is also created for that import. If you now select that import in the listing and click edit you can then see all the import details again. Look in the "Import Data" box, under the "Data File" select dropdown. You will see the file space path where you can SFTP your data file. Once its been uploaded refresh this page and you should see you data file in the select drop down. Select it in the dropdown and click save.</p>

		<p>On that page you might have also seen a couple other areas: "Parameters", "Hooks" and "Field Mapping".</p>

		<h3>Import Parameters</h3>

		<p>The "Parameters" section is pretty self explanitory. Basically these allow you to set the resources state, access, and group ownership when the resources are imported. It also has a parameter to check by title, which will check the database of already existing resources and update a matched resource with the incoming data instead of creating a new resource. Of course if a Hub resource ID is passed with the raw data then that will do the same as match by title just far more accurate. Its more accurate since match by title only looks to see if the incoming title is ~ 90% match to an existing resource title. The last param just determines whether or not to check the required custom fields of a resource type against the incoming data. If this is set to "yes" and a resource doesnt have all required fields it will fail to import. This will NOT stop the import of other resources though.</p>

		<h3>Import Hooks</h3>

		<p>The "Hooks" section can be very useful but might be confusing at first. To make the importer applicable to all hubs it expects that the raw incoming resource data is mapped to the EXACT fields in the database. To accommodate all import situations, import hooks were made. There are three types of hooks, "post parse", "post map", and "post convert" which are the 3 events you can listen for in the import process. You can run any number of hooks at each of these events in the order that you set for that import. All hooks are called on a single record at a time, meaning each hook takes the data of one resource record at a time and is responsible for returning a modified version of that resource data.</p>

		<p>Import hooks have a separate section found at: Components > Resources > Import Hooks. This allowed for the hooks (really php scripts) to be made into reusable blocks that you could attach to any or all of you imports.</p>

		<ol>
			<li><strong>Post Parse:</strong> A good example of a post parse hook would be if you do not have the ability to control your raw data, so you simply write a PHP script which takes your raw data and maps it to the right resource fields. It could also be used for cleanup, removing bad urls, creating child resource &amp; contributor objects, etc.</li>

			<li><strong>Post Map:</strong> A good example of a post map hook would be if say you were running the same import again, with the match by title parameter on. As each record is being imported it finds a match and loads that existing resource. Say you wanted to make sure you didnt loose any changes to the tags on that resource between the time you first imported and now. Your post map script could fetch the existing tags and merge with the incoming. At the "Post Map" hook the raw data has been mapped to the Resource Objects and could possibly have a Hub resource ID.</li>

			<li><strong>Post Convert:</strong> A good example of a post convert hook is if you wanted to do anything special to that resource, like generate a DOI or add badges. Since the DOI creation is not something we want to do for every resource its not something that happens by default in the importer. By this time the resource objects have already been saved to the database.</li>
		</ol>

		<h3>Field Mapping</h3>

		<p>After uploading an import file, the system attempts to map columns/fields in the file to existing member profile fields. To do this, it will strip punctuation and whitespace, make all characters lowercase, and then attempt to map the result to a list of synonyms for each field. For example, columns named "UID", "User ID", "Member ID", "mid" will all map to the field "uidNumber".</p>

		<p>If the system fails to find an appropriate match, one can be specified from the list of fields.</p>

		<p><strong>Unmapped fields</strong> will be ignored and the data dropped.</p>
	</section>
	<section id="required">
		<h2><span>Required Fields</span></h2>

		<h3>Updating Records</h3>

		<p>When updating records, there must be some form of key or unique identification information tied to each record. Typically, this will be <strong>uidNumber</strong> but can also be <strong>username</strong>. IF either of these fields are <em>not</em> available, the system will attempt to create a new record with the available data.</p>

		<h3>Creating Records</h3>

		<p>When creating new profiles, the following fields are required: Name, Email, Username.</p>
	</section>
	<section id="running">
		<h2><span>Running an Import</span></h2>

		<p>Running an import should be pretty easy. There are two modes, "dry-run" and "normal". Dry run simply allows you to run the import with all the hooks and settings in place, without actually doing any creating or modifications to the data on in the database. Normal mode is the mode where it will save any incoming data.</p>

		<p><strong>** We recommend running in dry run mode first and at least spot checking the results in the list to make sure everything looks good before mass importing records.</strong></p>
	</section>
</article>
