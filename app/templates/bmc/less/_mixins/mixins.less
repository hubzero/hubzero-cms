// layout mixins
@import "layout.less";

.opacity(@opacity: 100) {
	filter: e(%("alpha(opacity=%d)", @opacity));
	-moz-opacity: @opacity / 100;
	opacity: @opacity / 100;
}

.box-sizing(@box-model) {
	-webkit-box-sizing: @box-model;
	-moz-box-sizing: @box-model;
	box-sizing: @box-model;
}

.gradient(@start: #555, @end: #333) {
	background-color: mix(@start, @end, 60%);
	background-image: -moz-linear-gradient(top, @start, @end); // FF 3.6+
	background-image: -ms-linear-gradient(top, @start, @end); // IE10
	background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start), to(@end)); // Safari 4+, Chrome 2+
	background-image: -webkit-linear-gradient(top, @start, @end); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient(top, @start, @end); // Opera 11.10
	background-image: linear-gradient(top, @start, @end); // The standard
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@start,@end)); // IE9 and down
}

.radialGradiant(@innerColor: #555, @outerColor: #333) {
	background-color: @outerColor;
	background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@innerColor), to(@outerColor));
	background-image: -webkit-radial-gradient(circle, @innerColor, @outerColor);
	background-image: -moz-radial-gradient(circle, @innerColor, @outerColor);
	background-image: -o-radial-gradient(circle, @innerColor, @outerColor);
	background-repeat: no-repeat;
}

.transition(@transition: all ease-in .2s) {
	-moz-transition: 	@transition;
	-o-transition:      @transition;
	-webkit-transition: @transition;
	transition: 		@transition;
}

.transition-delay(@delay) {
	-webkit-transition-delay: @delay;
	-moz-transition-delay:    @delay;
	-ms-transition-delay:     @delay;
	-o-transition-delay:      @delay;
}

.transform(@string) {
	-webkit-transform: 	@string;
	-moz-transform: 	@string;
	-ms-transform: 		@string;
	-o-transform: 		@string;
}

.transform-origin(@x:center, @y:center) {
	-webkit-transform-origin: @x @y;
	-moz-transform-origin:    @x @y;
	-ms-transform-origin:     @x @y;
	-o-transform-origin:      @x @y;
}

.scale(@factor) {
	-webkit-transform:	scale(@factor);
	-moz-transform: 	scale(@factor);
	-ms-transform: 		scale(@factor);
	-o-transform: 		scale(@factor);
}

.rotate(@deg) {
	-webkit-transform: 	rotate(@deg);
	-moz-transform: 	rotate(@deg);
	-ms-transform: 		rotate(@deg);
	-o-transform: 		rotate(@deg);
}

.translate(@x, @y:0) {
	-webkit-transform:   translate(@x, @y);
	-moz-transform: 	 translate(@x, @y);
	-ms-transform: 		 translate(@x, @y);
	-o-transform: 		 translate(@x, @y);
}

.translateAndRotate(@x, @y, @deg) {
	-webkit-transform:   translate(@x, @y) rotate(@deg);
	-moz-transform: 	 translate(@x, @y) rotate(@deg);
	-ms-transform: 		 translate(@x, @y) rotate(@deg);
	-o-transform: 		 translate(@x, @y) rotate(@deg);
}

.translate3d(@x, @y: 0, @z: 0) {
	-webkit-transform:   translate3d(@x, @y, @z);
	-moz-transform: 	 translate3d(@x, @y, @z);
	-ms-transform: 		 translate3d(@x, @y, @z);
	-o-transform: 		 translate3d(@x, @y, @z);
}

.perspective(@value: 1000) {
	-webkit-perspective: 	@value;
	-moz-perspective: 	@value;
	-ms-perspective: 	@value;
	perspective: 		@value;
}

.rounded(@radius: 2px) {
	-webkit-border-radius: @radius;
	-moz-border-radius: @radius;
	border-radius: @radius;
}
.border-top-radius(@radius) {
	border-top-right-radius: @radius;
	border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
	border-bottom-right-radius: @radius;
	border-top-right-radius: @radius;
}
.border-bottom-radius(@radius) {
	border-bottom-right-radius: @radius;
	border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
	border-bottom-left-radius: @radius;
	border-top-left-radius: @radius;
}
.bordered(@top-color: #eee, @right-color: #eee, @bottom-color: #eee, @left-color: #eee) {
	border-top: 1px solid @top-color;
	border-right: 1px solid @right-color;
	border-bottom: 1px solid @bottom-color;
	border-left: 1px solid @left-color;
}

.vertical-align() {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

.placeholder(@color, @fontStyle: italic) {
	&::-webkit-input-placeholder {
		color: @color;
		font-style: italic;
	}
	&:-moz-placeholder {
		color: @color;
		font-style: italic;
	}
}

.box-shadow(@string) {
	-webkit-box-shadow: @string;
	-moz-box-shadow:    @string;
	box-shadow:         @string;
}

.text-shadow (@string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
	text-shadow: @string;
}

.inner-shadow(@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
	-webkit-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
	-moz-box-shadow:    inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
	box-shadow:         inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
}

// :after, :before prep
.ab() {
	display: block;
	content: '';
	position: absolute;
}

.stretch() {
	.ab();

	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

.cf() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

.closeButton(@size, @color: #fff) {
	display: block;
	position: absolute;
	overflow: hidden;
	margin: 0;
	padding: 0;
	width: @size;
	height: @size;
	font-size: 0;
	text-indent: -9999px;
	border: none;
	cursor: pointer;
	background: none;
	outline: none;

	:focus {
		outline: none;
	}

	&:before,
	&:after {
		position: absolute;
		display: block;
		top: @size / 2;
		left: 0;
		width: 100%;
		height: 2px;
		background-color: @color;
		content: "";
		.transition(all linear .1s);
	}

	&:before {
		.rotate(45deg);
	}

	&:after {
		.rotate(-45deg);
	}

	&:hover {
		&:before {
			.rotate(0deg);
		}

		&:after {
			.rotate(0deg);
			.opacity(0);
		}
	}
}

// Animation

/* not yet supported
.keyframes(@name; @arguments) {
	@-moz-keyframes @name { @arguments(); }
	@-webkit-keyframes @name { @arguments(); }
	@keyframes @name { @arguments(); }
}
*/

// ---------
// Shorthand to define a CSS animation, setting all parameters at once.
//
// Values: none | <animation-name> <animation-duration> <animation-timing-function> <animation-delay> <animation-iteration-count> <animation-direction> <animation-fill-mode> <animation-play-state>
.animation(@animation) {
	-webkit-animation: @animation;
	-ms-animation: @animation;
	animation: @animation;
}

// Animation name
// --------------
// The animation-name CSS property specifies a list of animations that should be applied to the selected element. Each name indicates a @keyframes at-rule that defines the property values for the animation sequence.
//
// Values: <string>
.animation-name(@name) {
	-webkit-animation-name: @name;
	-ms-animation-name: @name;
	animation-name: @name;
}

// Animation duration
// ------------------
// The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle.
//
// Values: <number>
.animation-duration(@duration: 0) {
	-webkit-animation-duration: @duration;
	-ms-animation-duration: @duration;
	animation-duration: @duration;
}

// Animation timing function
// -------------------------
// The animation-timing-function CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation.
//
// Values: linear | ease | ease-in | ease-out | ease-in-out | <cubic-bezier(n,n,n,n)>
.animation-timing-function(@function: ease) {
	-webkit-animation-timing-function: @function;
	-ms-animation-timing-function: @function;
	animation-timing-function: @function;
}


// Animation delay
// ---------------
// Defines a length of time to elapse before an animation starts, allowing an animation to begin execution some time after it is applied.
//
// Values: <number>
.animation-delay(@delay: 0) {
	-webkit-animation-delay: @delay;
	-ms-animation-delay: @delay;
	animation-delay: @delay;
}


// Animation iteration count
// -------------------------
// The animation-iteration-count CSS property specifies how a CSS animation should apply styles to its target before and after it is executing.
//
// Values: <number> | infinite
.animation-iteration-count(@count: 1) {
	-webkit-animation-iteration-count: @count;
	-ms-animation-iteration-count: @count;
	animation-iteration-count: @count;
}


// Animation direction
// -------------------
// The animation-direction CSS property indicates whether the animation should play in reverse on alternate cycles.
//
// Values: normal | reverse | alternate | alternate-reverse
.animation-direction(@direction: normal) {
	-webkit-animation-direction: @direction;
	-ms-animation-direction: @direction;
	animation-direction: @direction;
}


// Animation fill mode
// -------------------
// The animation-fill-mode CSS property specifies how a CSS animation should apply styles to its target before and after it is executing.
//
// Values: none | forwards | backwards | both
.animation-fill-mode(@mode) {
	-webkit-animation-fill-mode: @mode;
	-ms-animation-fill-mode: @mode;
	animation-fill-mode: @mode;
}


// Animation play state
// --------------------
// The animation-play-state CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation.
//
// Values: running | paused
.animation-play-state(@state: running) {
	-webkit-animation-play-state: @state;
	-ms-animation-play-state: @state;
	animation-play-state: @state;
}